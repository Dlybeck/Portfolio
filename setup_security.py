#!/usr/bin/env python3
"""
Security Setup Script for Dev Dashboard
Run this script to generate secure credentials for first-time setup
"""

import secrets
import pyotp
import qrcode
from passlib.context import CryptContext
from pathlib import Path

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def generate_secret_key() -> str:
    """Generate a secure 256-bit secret key for JWT"""
    return secrets.token_hex(32)


def generate_totp_secret() -> str:
    """Generate a TOTP secret for 2FA"""
    return pyotp.random_base32()


def hash_password(password: str) -> str:
    """Hash password with bcrypt"""
    return pwd_context.hash(password)


def validate_password(password: str) -> tuple[bool, str]:
    """Validate password strength"""
    if len(password) < 16:
        return False, "Password must be at least 16 characters long"

    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    has_special = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)

    if not (has_upper and has_lower and has_digit and has_special):
        return False, "Password must contain: uppercase, lowercase, numbers, and special characters"

    return True, ""


def generate_qr_code(totp_uri: str, filename: str = "totp_qr.png"):
    """Generate QR code for TOTP setup"""
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(totp_uri)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(filename)
    return filename


def main():
    print("=" * 60)
    print("üîê Dev Dashboard Security Setup")
    print("=" * 60)
    print()

    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("‚ùå Setup cancelled.")
            return

    # Generate SECRET_KEY
    print("üìù Generating JWT secret key...")
    secret_key = generate_secret_key()
    print(f"‚úÖ Generated: {secret_key[:16]}...")

    # Get username
    print()
    username = input("üë§ Enter dashboard username (default: admin): ").strip() or "admin"

    # Get password
    print()
    print("üîë Password requirements:")
    print("  - At least 16 characters")
    print("  - Must contain: uppercase, lowercase, numbers, special characters")
    print()

    while True:
        password = input("Enter dashboard password: ").strip()
        is_valid, error_msg = validate_password(password)
        if is_valid:
            break
        print(f"‚ùå {error_msg}")
        print()

    password_hash = hash_password(password)
    print(f"‚úÖ Password hashed")

    # Generate TOTP secret
    print()
    print("üì± Generating 2FA (TOTP) secret...")
    totp_secret = generate_totp_secret()
    totp = pyotp.TOTP(totp_secret)
    totp_uri = totp.provisioning_uri(name=username, issuer_name="Dev Dashboard")
    print(f"‚úÖ Generated TOTP secret: {totp_secret}")

    # Generate QR code
    print()
    print("üì∑ Generating QR code for Google Authenticator...")
    qr_filename = generate_qr_code(totp_uri)
    print(f"‚úÖ QR code saved to: {qr_filename}")

    # Get Anthropic API key
    print()
    anthropic_key = input("ü§ñ Enter Anthropic API key (or press Enter to skip): ").strip()

    # Create .env file
    print()
    print("üíæ Creating .env file...")

    env_content = f"""# ================================
# DEV DASHBOARD SECURITY SETTINGS
# ================================
# Generated by setup_security.py

# JWT Secret
SECRET_KEY={secret_key}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Dashboard Credentials
DASHBOARD_USERNAME={username}
DASHBOARD_PASSWORD_HASH={password_hash}

# TOTP 2FA Secret
TOTP_SECRET={totp_secret}

# Rate Limiting
MAX_LOGIN_ATTEMPTS=3
LOCKOUT_DURATION_MINUTES=15

# Session Management
MAX_DEVICES_PER_USER=3
AUTO_LOGOUT_IDLE_MINUTES=10

# Network Security (Tailscale)
BIND_HOST=0.0.0.0
BIND_PORT=8080

# Command Safety
BLOCK_DANGEROUS_COMMANDS=true
REQUIRE_CONFIRMATION_FOR_DESTRUCTIVE=true
LOG_ALL_COMMANDS=true
READ_ONLY_MODE=false

# AI Integration
ANTHROPIC_API_KEY={anthropic_key}

# Logging & Monitoring
LOG_LEVEL=INFO
LOG_FILE=logs/dashboard.log
ALERT_EMAIL=
ALERT_ON_FAILED_LOGIN=true
ALERT_ON_NEW_DEVICE=true

# Development
DEBUG=false
"""

    env_file.write_text(env_content)
    print(f"‚úÖ Created .env file")

    # Print summary
    print()
    print("=" * 60)
    print("‚úÖ Setup Complete!")
    print("=" * 60)
    print()
    print("üìã Next Steps:")
    print()
    print("1. Install Tailscale on your Mac:")
    print("   brew install tailscale")
    print("   sudo tailscale up")
    print()
    print("2. Scan the QR code with Google Authenticator:")
    print(f"   Open: {qr_filename}")
    print()
    print("   Or manually add this secret:")
    print(f"   {totp_secret}")
    print()
    print("3. Install dependencies:")
    print("   pip install -r requirements.txt")
    print()
    print("4. Start the dashboard:")
    print("   python main.py")
    print()
    print("5. Install Tailscale on your phone/devices")
    print("   iOS: https://apps.apple.com/app/tailscale/id1470499037")
    print("   Android: https://play.google.com/store/apps/details?id=com.tailscale.ipn")
    print()
    print("6. Access dashboard via Tailscale IP:")
    print("   https://<your-mac-tailscale-ip>:8080/dev")
    print()
    print("üîê Login Credentials:")
    print(f"   Username: {username}")
    print(f"   Password: {password}")
    print("   2FA: Use Google Authenticator app")
    print()
    print("‚ö†Ô∏è  IMPORTANT:")
    print("   - Keep .env file secure (already in .gitignore)")
    print("   - Save your password somewhere safe")
    print(f"   - Keep {qr_filename} for backup (or delete after setup)")
    print()


if __name__ == "__main__":
    main()
